unit uMatricula;

interface

uses
  System.Classes, System.SysUtils, System.Generics.Collections;

type
  // Classe modelo para Matrícula
  TMatricula = class
  private
    FCodigo: Integer;
    FCodigoTurma: Integer;
    FCodigoEstudante: Integer;
  public
    constructor Create(aCodigo, aCodigoTurma, aCodigoEstudante: Integer);
    property Codigo: Integer read FCodigo write FCodigo;
    property CodigoTurma: Integer read FCodigoTurma write FCodigoTurma;
    property CodigoEstudante: Integer read FCodigoEstudante write FCodigoEstudante;
    function ToString: string; override;
  end;

  // Controlador para gerenciar Matrículas
  TMatriculaControlador = class
  private
    FLista: TObjectList<TMatricula>;
    FArquivo: string;
    function BuscarIndice(aCodigo: Integer): Integer;
    function ObterProximoCodigo: Integer;
    function ExisteCombinacao(aCodigoTurma, aCodigoEstudante: Integer): Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function Incluir(aCodigo: Integer; aCodigoTurma, aCodigoEstudante: Integer): Boolean;
    function Atualizar(aCodigo, aCodigoTurma, aCodigoEstudante: Integer): Boolean;
    function Excluir(aCodigo: Integer): Boolean;
    function BuscarPorCodigo(aCodigo: Integer): TMatricula;
    procedure Listar(AStringList: TStrings);

    procedure CarregarDados;
    procedure SalvarDados;
  end;

implementation

// --------------------------------------------------------------------------------------------------
// TMatricula
// --------------------------------------------------------------------------------------------------

constructor TMatricula.Create(aCodigo, aCodigoTurma, aCodigoEstudante: Integer);
begin
  inherited Create;
  FCodigo := aCodigo;
  FCodigoTurma := aCodigoTurma;
  FCodigoEstudante := aCodigoEstudante;
end;

function TMatricula.ToString: string;
begin
  Result := Format('Código: %d - Turma: %d - Estudante: %d',
    [FCodigo, FCodigoTurma, FCodigoEstudante]);
end;

// --------------------------------------------------------------------------------------------------
// TMatriculaControlador
// --------------------------------------------------------------------------------------------------

constructor TMatriculaControlador.Create;
begin
  inherited Create;
  FLista := TObjectList<TMatricula>.Create(True);
  FArquivo := 'matriculas.txt';
end;

destructor TMatriculaControlador.Destroy;
begin
  FLista.Free;
  inherited Destroy;
end;

function TMatriculaControlador.BuscarIndice(aCodigo: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo = aCodigo then
    begin
      Result := i;
      Break;
    end;
  end;
end;

function TMatriculaControlador.ObterProximoCodigo: Integer;
var
  i: Integer;
  maiorCodigo: Integer;
begin
  maiorCodigo := 0;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo > maiorCodigo then
      maiorCodigo := FLista[i].Codigo;
  end;
  Result := maiorCodigo + 1;
end;

function TMatriculaControlador.ExisteCombinacao(aCodigoTurma, aCodigoEstudante: Integer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to FLista.Count - 1 do
  begin
    if (FLista[i].CodigoTurma = aCodigoTurma) and
       (FLista[i].CodigoEstudante = aCodigoEstudante) then
    begin
      Result := True;
      Break;
    end;
  end;
end;

function TMatriculaControlador.Incluir(aCodigo: Integer; aCodigoTurma, aCodigoEstudante: Integer): Boolean;
var
  matricula: TMatricula;
begin
  Result := False;
  if BuscarIndice(aCodigo) <> -1 then
    raise Exception.Create('Código da matrícula já existe');
  if aCodigoTurma <= 0 then
    raise Exception.Create('Código da turma deve ser maior que zero');
  if aCodigoEstudante <= 0 then
    raise Exception.Create('Código do estudante deve ser maior que zero');
  
  if ExisteCombinacao(aCodigoTurma, aCodigoEstudante) then
    raise Exception.Create('Estudante já está matriculado nesta turma');
    
  try
    matricula := TMatricula.Create(aCodigo, aCodigoTurma, aCodigoEstudante);
    FLista.Add(matricula);
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao incluir matrícula: ' + E.Message);
  end;
end;

function TMatriculaControlador.Atualizar(aCodigo, aCodigoTurma, aCodigoEstudante: Integer): Boolean;
var
  indice: Integer;
  i: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);

  if indice < 0 then
    raise Exception.Create('Matrícula não encontrada');
  if aCodigoTurma <= 0 then
    raise Exception.Create('Código da turma deve ser maior que zero');
  if aCodigoEstudante <= 0 then
    raise Exception.Create('Código do estudante deve ser maior que zero');

  for i := 0 to FLista.Count - 1 do
  begin
    if (i <> indice) and (FLista[i].CodigoTurma = aCodigoTurma) and (FLista[i].CodigoEstudante = aCodigoEstudante) then
      raise Exception.Create('Estudante já está matriculado nesta turma');
  end;

  try
    FLista[indice].CodigoTurma := aCodigoTurma;
    FLista[indice].CodigoEstudante := aCodigoEstudante;
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao atualizar matrícula: ' + E.Message);
  end;
end;

function TMatriculaControlador.Excluir(aCodigo: Integer): Boolean;
var
  indice: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
  begin
    try
      FLista.Delete(indice);
      SalvarDados;
      Result := True;
    except
      on E: Exception do
        raise Exception.Create('Erro ao excluir matrícula: ' + E.Message);
    end;
  end;
end;

function TMatriculaControlador.BuscarPorCodigo(aCodigo: Integer): TMatricula;
var
  indice: Integer;
begin
  Result := nil;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
    Result := FLista[indice];
end;

procedure TMatriculaControlador.Listar(AStringList: TStrings);
var
  matricula: TMatricula;
begin
  AStringList.Clear;
  for matricula in FLista do
    AStringList.Add(matricula.ToString);
end;

procedure TMatriculaControlador.CarregarDados;
var
  F: TFileStream;
  matricula: TMatricula;
  codigo, codigoTurma, codigoEstudante: Integer;
begin
  if not FileExists(FArquivo) then Exit;
  F := TFileStream.Create(FArquivo, fmOpenRead);
  try
    FLista.Clear;
    while F.Position < F.Size do
    begin
      F.Read(codigo, SizeOf(Integer));
      F.Read(codigoTurma, SizeOf(Integer));
      F.Read(codigoEstudante, SizeOf(Integer));
      matricula := TMatricula.Create(codigo, codigoTurma, codigoEstudante);
      FLista.Add(matricula);
    end;
  finally
    F.Free;
  end;
end;

procedure TMatriculaControlador.SalvarDados;
var
  F: TFileStream;
  matricula: TMatricula;
begin
  F := TFileStream.Create(FArquivo, fmCreate);
  try
    for matricula in FLista do
    begin
      F.Write(matricula.Codigo, SizeOf(Integer));
      F.Write(matricula.CodigoTurma, SizeOf(Integer));
      F.Write(matricula.CodigoEstudante, SizeOf(Integer));
    end;
  finally
    F.Free;
  end;
end;

end.