unit uDisciplina;

interface

uses
  System.Classes, System.SysUtils, System.Generics.Collections;

type
  // Classe modelo para Disciplina
  TDisciplina = class
  private
    FCodigo: Integer;
    FNome: string;
  public
    constructor Create(aCodigo: Integer; aNome: string);
    property Codigo: Integer read FCodigo write FCodigo;
    property Nome: string read FNome write FNome;
    function ToString: string; override;
  end;

  // Controlador para gerenciar Disciplinas
  TDisciplinaControlador = class
  private
    FLista: TObjectList<TDisciplina>;
    FArquivo: string;
    function BuscarIndice(aCodigo: Integer): Integer;
    function ObterProximoCodigo: Integer;
    function ExisteNome(const aNome: string): Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function Incluir(aCodigo: Integer; const aNome: string): Boolean;
    function Atualizar(aCodigo: Integer; const aNome: string): Boolean;
    function Excluir(aCodigo: Integer): Boolean;
    function BuscarPorCodigo(aCodigo: Integer): TDisciplina;
    procedure Listar(AStringList: TStrings);

    procedure CarregarDados;
    procedure SalvarDados;
  end;

implementation

// --------------------------------------------------------------------------------------------------
// TDisciplina
// --------------------------------------------------------------------------------------------------

constructor TDisciplina.Create(aCodigo: Integer; aNome: string);
begin
  inherited Create;
  FCodigo := aCodigo;
  FNome := aNome;
end;

function TDisciplina.ToString: string;
begin
  Result := Format('Código: %d - Nome: %s', [FCodigo, FNome]);
end;

// --------------------------------------------------------------------------------------------------
// TDisciplinaControlador
// --------------------------------------------------------------------------------------------------

constructor TDisciplinaControlador.Create;
begin
  inherited Create;
  FLista := TObjectList<TDisciplina>.Create(True);
  FArquivo := 'disciplinas.txt';
end;

destructor TDisciplinaControlador.Destroy;
begin
  FLista.Free;
  inherited Destroy;
end;

function TDisciplinaControlador.BuscarIndice(aCodigo: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo = aCodigo then
    begin
      Result := i;
      Break;
    end;
  end;
end;

function TDisciplinaControlador.ObterProximoCodigo: Integer;
var
  i: Integer;
  maiorCodigo: Integer;
begin
  maiorCodigo := 0;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo > maiorCodigo then
      maiorCodigo := FLista[i].Codigo;
  end;
  Result := maiorCodigo + 1;
end;

function TDisciplinaControlador.ExisteNome(const aNome: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to FLista.Count - 1 do
  begin
    if SameText(FLista[i].Nome, aNome) then
    begin
      Result := True;
      Break;
    end;
  end;
end;

function TDisciplinaControlador.Incluir(aCodigo: Integer; const aNome: string): Boolean;
begin
  Result := False;
  if BuscarIndice(aCodigo) <> -1 then
    raise Exception.Create('Código de disciplina já existe');
  if Trim(aNome) = '' then
    raise Exception.Create('Nome da disciplina não pode estar vazio');
  
  try
    FLista.Add(TDisciplina.Create(aCodigo, aNome));
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao incluir disciplina: ' + E.Message);
  end;
end;

function TDisciplinaControlador.Atualizar(aCodigo: Integer; const aNome: string): Boolean;
var
  indice: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);
  
  if indice < 0 then
    raise Exception.Create('Disciplina não encontrada');
  
  if Trim(aNome) = '' then
    raise Exception.Create('Nome da disciplina não pode estar vazio');

  try
    FLista[indice].Nome := aNome;
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao atualizar disciplina: ' + E.Message);
  end;
end;

function TDisciplinaControlador.Excluir(aCodigo: Integer): Boolean;
var
  indice: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
  begin
    try
      FLista.Delete(indice);
      SalvarDados;
      Result := True;
    except
      on E: Exception do
        raise Exception.Create('Erro ao excluir disciplina: ' + E.Message);
    end;
  end;
end;

function TDisciplinaControlador.BuscarPorCodigo(aCodigo: Integer): TDisciplina;
var
  indice: Integer;
begin
  Result := nil;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
    Result := FLista[indice];
end;

procedure TDisciplinaControlador.Listar(AStringList: TStrings);
var
  disciplina: TDisciplina;
begin
  AStringList.Clear;
  for disciplina in FLista do
    AStringList.Add(disciplina.ToString);
end;

procedure TDisciplinaControlador.CarregarDados;
var
  F: TFileStream;
  disciplina: TDisciplina;
  i, codigo: Integer;
  tamanhoNome: Integer;
  nome: string;
begin
  if not FileExists(FArquivo) then Exit;
  F := TFileStream.Create(FArquivo, fmOpenRead);
  try
    FLista.Clear;
    while F.Position < F.Size do
    begin
      F.Read(codigo, SizeOf(Integer));
      F.Read(tamanhoNome, SizeOf(Integer));
      SetLength(nome, tamanhoNome);
      F.Read(nome[1], tamanhoNome);
      disciplina := TDisciplina.Create(codigo, nome);
      FLista.Add(disciplina);
    end;
  finally
    F.Free;
  end;
end;

procedure TDisciplinaControlador.SalvarDados;
var
  F: TFileStream;
  disciplina: TDisciplina;
  tamanhoNome: Integer;
begin
  F := TFileStream.Create(FArquivo, fmCreate);
  try
    for disciplina in FLista do
    begin
      F.Write(disciplina.Codigo, SizeOf(Integer));
      tamanhoNome := Length(disciplina.Nome);
      F.Write(tamanhoNome, SizeOf(Integer));
      F.Write(disciplina.Nome[1], tamanhoNome);
    end;
  finally
    F.Free;
  end;
end;

end.