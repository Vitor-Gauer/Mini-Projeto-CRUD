unit uTurma;

interface

uses
  System.Classes, System.SysUtils, System.Generics.Collections;

type
  // Classe modelo para Turma
  TTurma = class
  private
    FCodigo: Integer;
    FCodigoProfessor: Integer;
    FCodigoDisciplina: Integer;
  public
    constructor Create(aCodigo, aCodigoProfessor, aCodigoDisciplina: Integer);
    property Codigo: Integer read FCodigo write FCodigo;
    property CodigoProfessor: Integer read FCodigoProfessor write FCodigoProfessor;
    property CodigoDisciplina: Integer read FCodigoDisciplina write FCodigoDisciplina;
    function ToString: string; override;
  end;

  // Controlador para gerenciar Turmas
  TTurmaControlador = class
  private
    FLista: TObjectList<TTurma>;
    FArquivo: string;
    function BuscarIndice(aCodigo: Integer): Integer;
    function ObterProximoCodigo: Integer;
    function ExisteCombinacao(aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function Incluir(aCodigo: Integer; aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
    function Atualizar(aCodigo, aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
    function Excluir(aCodigo: Integer): Boolean;
    function BuscarPorCodigo(aCodigo: Integer): TTurma;
    procedure Listar(AStringList: TStrings);

    procedure CarregarDados;
    procedure SalvarDados;
  end;

implementation

// --------------------------------------------------------------------------------------------------
// TTurma
// --------------------------------------------------------------------------------------------------

constructor TTurma.Create(aCodigo, aCodigoProfessor, aCodigoDisciplina: Integer);
begin
  inherited Create;
  FCodigo := aCodigo;
  FCodigoProfessor := aCodigoProfessor;
  FCodigoDisciplina := aCodigoDisciplina;
end;

function TTurma.ToString: string;
begin
  Result := Format('Código: %d - Professor: %d - Disciplina: %d',
    [FCodigo, FCodigoProfessor, FCodigoDisciplina]);
end;

// --------------------------------------------------------------------------------------------------
// TTurmaControlador
// --------------------------------------------------------------------------------------------------

constructor TTurmaControlador.Create;
begin
  inherited Create;
  FLista := TObjectList<TTurma>.Create(True);
  FArquivo := 'turmas.txt';
end;

destructor TTurmaControlador.Destroy;
begin
  FLista.Free;
  inherited Destroy;
end;

function TTurmaControlador.BuscarIndice(aCodigo: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo = aCodigo then
    begin
      Result := i;
      Break;
    end;
  end;
end;

function TTurmaControlador.ObterProximoCodigo: Integer;
var
  i: Integer;
  maiorCodigo: Integer;
begin
  maiorCodigo := 0;
  for i := 0 to FLista.Count - 1 do
  begin
    if FLista[i].Codigo > maiorCodigo then
      maiorCodigo := FLista[i].Codigo;
  end;
  Result := maiorCodigo + 1;
end;

function TTurmaControlador.ExisteCombinacao(aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to FLista.Count - 1 do
  begin
    if (FLista[i].CodigoProfessor = aCodigoProfessor) and
       (FLista[i].CodigoDisciplina = aCodigoDisciplina) then
    begin
      Result := True;
      Break;
    end;
  end;
end;

function TTurmaControlador.Incluir(aCodigo: Integer; aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
var
  turma: TTurma;
begin
  Result := False;
  if BuscarIndice(aCodigo) <> -1 then
    raise Exception.Create('Código da turma já existe');
  if aCodigoProfessor <= 0 then
    raise Exception.Create('Código do professor deve ser maior que zero');
  if aCodigoDisciplina <= 0 then
    raise Exception.Create('Código da disciplina deve ser maior que zero');
  
  if ExisteCombinacao(aCodigoProfessor, aCodigoDisciplina) then
    raise Exception.Create('Já existe uma turma com esta combinação de professor e disciplina');

  try
    turma := TTurma.Create(aCodigo, aCodigoProfessor, aCodigoDisciplina);
    FLista.Add(turma);
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao incluir turma: ' + E.Message);
  end;
end;

function TTurmaControlador.Atualizar(aCodigo, aCodigoProfessor, aCodigoDisciplina: Integer): Boolean;
var
  indice: Integer;
  i: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);

  if indice < 0 then
    raise Exception.Create('Turma não encontrada');

  if aCodigoProfessor <= 0 then
    raise Exception.Create('Código do professor deve ser maior que zero');
  if aCodigoDisciplina <= 0 then
    raise Exception.Create('Código da disciplina deve ser maior que zero');

  for i := 0 to FLista.Count - 1 do
  begin
    if (i <> indice) and (FLista[i].CodigoProfessor = aCodigoProfessor) and (FLista[i].CodigoDisciplina = aCodigoDisciplina) then
      raise Exception.Create('Já existe outra turma com esta combinação de professor e disciplina');
  end;

  try
    FLista[indice].CodigoProfessor := aCodigoProfessor;
    FLista[indice].CodigoDisciplina := aCodigoDisciplina;
    SalvarDados;
    Result := True;
  except
    on E: Exception do
      raise Exception.Create('Erro ao atualizar turma: ' + E.Message);
  end;
end;

function TTurmaControlador.Excluir(aCodigo: Integer): Boolean;
var
  indice: Integer;
begin
  Result := False;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
  begin
    try
      FLista.Delete(indice);
      SalvarDados;
      Result := True;
    except
      on E: Exception do
        raise Exception.Create('Erro ao excluir turma: ' + E.Message);
    end;
  end;
end;

function TTurmaControlador.BuscarPorCodigo(aCodigo: Integer): TTurma;
var
  indice: Integer;
begin
  Result := nil;
  indice := BuscarIndice(aCodigo);
  if indice >= 0 then
    Result := FLista[indice];
end;

procedure TTurmaControlador.Listar(AStringList: TStrings);
var
  turma: TTurma;
begin
  AStringList.Clear;
  for turma in FLista do
    AStringList.Add(turma.ToString);
end;

procedure TTurmaControlador.CarregarDados;
var
  F: TFileStream;
  turma: TTurma;
  codigo, codigoProfessor, codigoDisciplina: Integer;
begin
  if not FileExists(FArquivo) then Exit;
  F := TFileStream.Create(FArquivo, fmOpenRead);
  try
    FLista.Clear;
    while F.Position < F.Size do
    begin
      F.Read(codigo, SizeOf(Integer));
      F.Read(codigoProfessor, SizeOf(Integer));
      F.Read(codigoDisciplina, SizeOf(Integer));
      turma := TTurma.Create(codigo, codigoProfessor, codigoDisciplina);
      FLista.Add(turma);
    end;
  finally
    F.Free;
  end;
end;

procedure TTurmaControlador.SalvarDados;
var
  F: TFileStream;
  turma: TTurma;
begin
  F := TFileStream.Create(FArquivo, fmCreate);
  try
    for turma in FLista do
    begin
      F.Write(turma.Codigo, SizeOf(Integer));
      F.Write(turma.CodigoProfessor, SizeOf(Integer));
      F.Write(turma.CodigoDisciplina, SizeOf(Integer));
    end;
  finally
    F.Free;
  end;
end;

end.